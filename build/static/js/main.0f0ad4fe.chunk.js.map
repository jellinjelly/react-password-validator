{"version":3,"sources":["Components/PasswordValidator/PasswordValidationReducer.js","Components/PasswordValidator/validators.js","Components/PasswordValidator/ValidatorIcon.js","Components/PasswordValidator/index.js","App.js","reportWebVitals.js","index.js"],"names":["PasswordValidationReducer","state","action","type","payload","isInUse","Error","initialState","password","test","i","length","toLowerCase","ValidatorIcon","isValidated","className","PasswordValidator","options","useReducer","dispatch","useState","setPassword","selectedValidations","setSelectedValidations","currentValidators","setCurrentValidators","useEffect","forEach","option","newState","Object","keys","key","renderView","map","validation","desc","htmlFor","id","name","onChange","e","target","value","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MAaeA,EAZmB,SAACC,EAAOC,GACxC,OAAOA,EAAOC,MACZ,IAAK,gBAIH,OAHGF,EAAMC,EAAOE,WACdH,EAAMC,EAAOE,SAASC,SAAU,GAE3BJ,EACT,QACE,MAAM,IAAIK,QCRHC,EAAe,CAC1B,UAAc,CACZ,KAAS,mBACT,WAAe,SAACC,GAAD,MAAc,KAAKC,KAAKD,IACvC,SAAY,GAEd,aAAiB,CACf,KAAS,uBACT,WAAe,SAACA,GAAD,MAAc,QAAQC,KAAKD,IAC1C,SAAY,GAEd,eAAmB,CACjB,KAAS,8BACT,WAAe,SAACA,GAAD,MAAc,aAAaC,KAAKD,IAC/C,SAAY,GAEd,qBAAyB,CACvB,KAAS,6BACT,WAAe,SAACA,GACd,IAAI,IAAIE,EAAI,EAAGA,EAAIF,EAASG,OAAQD,IAClC,GAAGF,EAASE,GAAGE,iBAAmBJ,EAASE,EAAI,IAAMF,EAASE,EAAE,GAAGE,gBAAmB,WAAYH,KAAKD,EAASE,IAC9G,OAAO,EAGX,OAAO,GAET,SAAY,I,OC3BHG,EAAgB,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YAE7B,OACE,qBAAKC,UAAS,sBAAiBD,EAAc,UAAY,IAAzD,SACGA,EAAc,yCAAsB,uCCyD5BE,G,MAvDW,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAAa,EAEbC,qBAAWlB,EAA2BO,GAFzB,mBAEhCN,EAFgC,KAEzBkB,EAFyB,OAIPC,mBAAS,IAJF,mBAIhCZ,EAJgC,KAItBa,EAJsB,OAKeD,mBAAS,IALxB,mBAKhCE,EALgC,KAKXC,EALW,OAMUH,mBAAS,IANnB,mBAMhCI,EANgC,KAMdC,EANc,KAyCvC,OA5BAC,qBAAU,WACRT,EAAQU,SAAQ,SAAAC,GACdT,EAAS,CAAChB,KAAM,gBAAiBC,QAASwB,OAE5C,IAAIC,EAAW,GACfC,OAAOC,KAAK9B,GAAO0B,SAAQ,SAAAK,GACtB/B,EAAM+B,GAAK3B,UACZwB,EAASG,GAAO/B,EAAM+B,OAG1BT,EAAuBM,KACtB,IAGHH,qBAAU,WACR,GAAII,OAAOC,KAAKT,GAAqBX,OAAO,CAC1C,IAAIsB,EAAahB,EAAQiB,KAAI,SAAAN,GAC3B,OAAGN,EAAoBM,GACb,mCAAmB,cAAC,EAAD,CAAed,YAAaQ,EAAoBM,GAAQO,WAAW3B,KAC7Fc,EAAoBM,GAAQQ,OADZR,GAIZ,uBAAUA,MAEnBH,EAAqBQ,MAEtB,CAACzB,EAAUc,IAGZ,sBAAKP,UAAU,MAAf,UACE,oDACA,sBAAKA,UAAU,YAAf,UACE,uBAAOsB,QAAQ,WAAf,sBACA,uBAAOC,GAAG,WAAWnC,KAAK,WAAWoC,KAAK,WAAWC,SAtC9B,SAACC,GAC5BpB,EAAYoB,EAAEC,OAAOC,UAsCjB,6BACGnB,YCnCIoB,MAjBf,WAQE,OACE,qBAAK7B,UAAU,MAAf,SACE,kCACE,cAAC,EAAD,CAAmBE,QAVJ,CACnB,YACA,iBACA,eACA,+BCKW4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.0f0ad4fe.chunk.js","sourcesContent":["\nconst PasswordValidationReducer = (state, action) => {\n  switch(action.type) {\n    case 'useValidation':\n      if(state[action.payload]) {\n        state[action.payload].isInUse = true;\n      }\n      return state\n    default:\n      throw new Error();\n  }\n}\n\nexport default PasswordValidationReducer;","// each validation must contain all fields\nexport const initialState = {\n  \"hasNumber\" : {\n    \"desc\" : \"Has a Number 0-9\",\n    \"validation\" : (password) => /\\d/.test(password),\n    \"isInUse\" : false,\n  },\n  \"hasUpperCase\" : {\n    \"desc\" : \"Has uppercase Letter\",\n    \"validation\" : (password) => /[A-Z]/.test(password),\n    \"isInUse\" : false,\n  },\n  \"hasSpecialChar\" : {\n    \"desc\" : \"Has a special char !@#$%^&*\",\n    \"validation\" : (password) => /[!@#$%^&*]/.test(password),\n    \"isInUse\" : false,\n  },\n  \"noConsecutiveLetters\" : {\n    \"desc\" : \"Has no consecutive letters\",\n    \"validation\" : (password) => {\n      for(let i = 0; i < password.length; i++) {\n        if(password[i].toLowerCase() === (password[i - 1] && password[i-1].toLowerCase()) && (/[a-zA-Z]/).test(password[i])) {\n          return false\n        }\n      }\n      return true\n    },\n    \"isInUse\" : false,\n  }\n}\n","export const ValidatorIcon = ({isValidated}) => {\n  // receive prop of whether validation is successful or not, to change icon color and 'x' or 'check mark'\n  return (\n    <div className={`icon-circle ${isValidated ? 'success' : '' }`}>\n      {isValidated ? <div>&#x2713;</div> : <div>X</div>}\n    </div>\n  )\n}\n\n","import { useState, useReducer, useEffect } from 'react';\nimport PasswordValidationReducer from \"./PasswordValidationReducer\";\nimport { initialState } from \"./validators\";\nimport { ValidatorIcon } from './ValidatorIcon';\nimport \"./style.css\";\n\nconst PasswordValidator = ({options}) => {\n\n  const [state, dispatch] = useReducer(PasswordValidationReducer, initialState);\n\n  const [password, setPassword] = useState(\"\");\n  const [selectedValidations, setSelectedValidations] = useState({});\n  const [currentValidators,setCurrentValidators] = useState([])\n\n  const handlePasswordChange = (e) => {\n    setPassword(e.target.value)\n  }\n\n  // calls dispatch to change isInUse to true and set a list of selected validations\n  useEffect(() => {\n    options.forEach(option => {\n      dispatch({type: 'useValidation', payload: option})\n    })\n    let newState = {}\n    Object.keys(state).forEach(key => {\n      if(state[key].isInUse) {\n        newState[key] = state[key]\n      }\n    })\n    setSelectedValidations(newState)\n  }, [])\n\n  //render li for each selected option and rerender every pw change\n  useEffect(() => {\n    if (Object.keys(selectedValidations).length){\n      let renderView = options.map(option => {\n        if(selectedValidations[option]) {\n          return (<li key={option} > <ValidatorIcon isValidated={selectedValidations[option].validation(password)}/>\n          {selectedValidations[option].desc}\n        </li>)\n        }\n        return <div key={option}></div>\n      })\n      setCurrentValidators(renderView);\n    }\n  }, [password, selectedValidations])\n\n  return (\n    <div className=\"pwv\">\n      <h1>Password Component</h1>\n      <div className=\"container\">\n        <label htmlFor=\"password\">Password</label>\n        <input id=\"password\" type=\"password\" name=\"password\" onChange={handlePasswordChange}/>\n        <ul>\n          {currentValidators}\n        </ul>\n      </div>\n    </div>\n  )\n}\n\nexport default PasswordValidator","import PasswordValidator from './Components/PasswordValidator'\n\nfunction App() {\n  const passwordReqs = [\n    \"hasNumber\",\n    \"hasSpecialChar\",\n    \"hasUpperCase\",\n    \"noConsecutiveLetters\",\n  ]\n\n  return (\n    <div className=\"App\">\n      <section>\n        <PasswordValidator options={passwordReqs}/>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}